type Event @entity {
  id: ID!
  blockId: Int!
  eventIdx: Int!
  extrinsicIdx: Int
  specVersionId: Int!
  moduleId: String! @index(unique: false)
  eventId: String! @index(unique: false)
  attributesTxt: String!
  eventArg_0: String
  eventArg_1: String
  eventArg_2: String
  eventArg_3: String
  claimType: String
  claimScope: String
  claimIssuer: String
  claimExpiry: String
  corporateActionTicker: String
  fundraiserOfferingAsset: String
  transferTo: String
}

type Debug @entity {
  id: ID!
  line: String
  context: String
}

type FoundType @entity {
  id: ID! # This is type
  rawType: String!
}

type Block @entity {
  id: ID!
  blockId: Int!
  parentId: Int!
  hash: String!
  parentHash: String!
  stateRoot: String!
  extrinsicsRoot: String!
  countExtrinsics: Int!
  countExtrinsicsUnsigned: Int!
  countExtrinsicsSigned: Int!
  countExtrinsicsError: Int!
  countExtrinsicsSuccess: Int!
  countEvents: Int!
  datetime: Date!
  specVersionId: String!
}

type Extrinsic @entity {
  id: ID!
  blockId: Int!
  extrinsicIdx: Int!
  extrinsicLength: String!
  signed: Int!
  signedbyAddress: Int!
  address: String
  moduleId: String!
  callId: String!
  paramsTxt: String!
  success: Int!
  nonce: Int
  extrinsicHash: String
  specVersionId: Int!
}

type StakingEvent @entity {
  id: ID!
  blockId: Int! @index
  eventIdx: Int! @index
  stakingEventId: String! @index
  date: Date! @index
  identityId: String
  stashAccount: String
  amount: BigInt
  nominatedValidators: [String!]
}

type TickerExternalAgentAction @entity {
  id: ID!
  blockId: Int! @index
  eventIdx: Int! @index
  ticker: String! @index
  palletName: String! @index
  eventId: String! @index
  callerDid: String! @index
  datetime: Date!
}

type Funding @entity {
  id: ID!
  blockId: Int!
  ticker: String! @index(unique: false)
  fundingName: String! @index(unique: false)
  value: String!
  totalIssuedInFundingRound: String!
}

type Sto @entity {
  id: ID!
  offeringAsset: String!
}

type Authorization @entity {
  id: ID!
  createdBlock: Int!
  authId: Int! @index
  type: String! @index
  fromDid: String! @index
  toDid: String @index
  toKey: String @index
  data: String
  expiry: Date @index
  status: String!
  updatedBlock: Int!
}

type Investment @entity {
  id: ID!
  blockId: Int!
  investor: String!
  stoId: Int! @index
  offeringToken: String! @index
  raiseToken: String!
  offeringTokenAmount: BigInt!
  raiseTokenAmount: BigInt!
  datetime: Date!
}

type Portfolio @entity {
  id: ID!
  blockId: Int!
  identity: Identity! @index
  kind: String
  number: String! @index
  name: String
}

type Leg @entity {
  id: ID!
  blockId: Int!
  ticker: String! @index
  amount: String!
  from: Portfolio
  to: Portfolio
  instruction: Instruction @index
  settlement: Settlement @index
}

type Settlement @entity {
  id: ID!
  blockId: Int!
  identityId: String @index # required filter
  ticker: String @index # optional filter
  addresses: [String] @index # might need to break these into two columns to index
  result: String!
  legs: [Leg] @derivedFrom(field: "settlement")
  sender: Identity
  receiver: Identity
}

type Identity @entity {
  id: ID!
  blockId: Int!
  # accountId: String
  # secondaryKeys: [String]
  sent: [Settlement] @derivedFrom(field: "sender")
  received: [Settlement] @derivedFrom(field: "receiver")
  portfolios: [Portfolio] @derivedFrom(field: "identity")
}

type Instruction @entity {
  id: ID!
  blockId: Int!
  eventId: String!
  status: String!
  venueId: String @index
  settlementType: String
  tradeDate: String
  valueDate: String
  legs: [Leg] @derivedFrom(field: "instruction")
  addresses: [String]
}
