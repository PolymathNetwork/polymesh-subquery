type Event @entity {
  id: ID!
  block: Block!
  eventIdx: Int!
  extrinsicIdx: Int
  specVersionId: Int!
  moduleId: String! @index(unique: false)
  eventId: String! @index(unique: false)
  attributesTxt: String!
  eventArg_0: String
  eventArg_1: String
  eventArg_2: String
  eventArg_3: String
  claimType: String
  claimScope: String
  claimIssuer: String
  claimExpiry: String
  corporateActionTicker: String
  fundraiserOfferingAsset: String
  transferTo: String
}

type Debug @entity {
  id: ID!
  line: String
  context: String
}

type FoundType @entity {
  id: ID!
  rawType: String!
}

type Block @entity {
  id: ID!
  blockId: Int! @index(unique: false)
  parentId: Int!
  hash: String!
  parentHash: String!
  stateRoot: String!
  extrinsicsRoot: String!
  countExtrinsics: Int!
  countExtrinsicsUnsigned: Int!
  countExtrinsicsSigned: Int!
  countExtrinsicsError: Int!
  countExtrinsicsSuccess: Int!
  countEvents: Int!
  datetime: Date!
  specVersionId: Int!
}

type Extrinsic @entity {
  id: ID!
  block: Block! @index(unique: false)
  extrinsicIdx: Int!
  extrinsicLength: Int!
  signed: Int!
  signedbyAddress: Int!
  address: String
  moduleId: String! @index(unique: false)
  callId: String! @index(unique: false)
  paramsTxt: String!
  success: Int! @index(unique: false)
  nonce: Int
  extrinsicHash: String @index(unique: false)
  specVersionId: Int!
}

type AssetPermissions @jsonField {
  type: String!
  values: [String]!
}

type TransactionPermissions @jsonField {
  type: String!
  values: [String]!
}

type PortfolioPermissions @jsonField {
  type: String!
  values: [PortfolioJson]!
}

type Permissions @entity {
  id: ID!
  assets: AssetPermissions
  portfolios: PortfolioPermissions
  transactions: TransactionPermissions
  transactionGroups: [String]!
  datetime: Date!
  createdBlock: Block!
  updatedBlock: Block!
}

type Account @entity {
  id: ID!
  address: String! @index(unique: true)
  identity: Identity!
  eventId: String! @index(unique: false)
  permissions: Permissions!
  datetime: Date!
  createdBlock: Block!
  updatedBlock: Block!
}

type Identity @entity {
  id: ID!
  did: String! @index(unique: true)
  primaryAccount: String! @index(unique: false)
  secondaryAccounts: [Account!]! @derivedFrom(field: "identity")
  secondaryKeysFrozen: Boolean!
  eventId: String!
  datetime: Date!
  createdBlock: Block!
  updatedBlock: Block!
  heldAssets: [AssetHolder]! @derivedFrom(field: "identity")
  portfolios: [Portfolio!]! @derivedFrom(field: "identity")
}

type BridgeEvent @entity {
  id: ID!
  identity: Identity!
  recipient: String!
  amount: BigInt!
  txHash: String! @index(unique: false)
  datetime: Date!
  createdBlock: Block!
  updatedBlock: Block!
}

type StakingEvent @entity {
  id: ID!
  stashAccount: String @index(unique: false)
  identity: Identity
  eventId: String! @index(unique: false)
  amount: BigInt
  nominatedValidators: [String!]
  transactionId: String
  datetime: Date! @index
  createdBlock: Block!
  updatedBlock: Block!
}

type TickerExternalAgentAction @entity {
  id: ID!
  asset: Asset! @index(unique: false)
  caller: Identity! @index(unique: false)
  palletName: String! @index(unique: false)
  eventId: String! @index(unique: false)
  eventIdx: Int!
  datetime: Date!
  createdBlock: Block! @index(unique: false)
  updatedBlock: Block!
}

type Sto @entity {
  id: ID!
  offeringAsset: Asset!
  createdBlock: Block!
  updatedBlock: Block!
}

type Authorization @entity {
  id: ID!
  type: String! @index(unique: false)
  from: Identity! @index(unique: false)
  to: Identity @index(unique: false)
  toKey: String @index(unique: false)
  data: String
  expiry: Date @index(unique: false)
  status: String!
  createdBlock: Block!
  updatedBlock: Block!
}

type Investment @entity {
  id: ID!
  investor: String!
  stoId: Int! @index(unique: false)
  offeringToken: String! @index(unique: false)
  raiseToken: String!
  offeringTokenAmount: BigInt!
  raiseTokenAmount: BigInt!
  datetime: Date!
  createdBlock: Block!
  updatedBlock: Block!
}

type TickerExternalAgentAdded @entity {
  id: ID! # ticker/callerId
  ticker: String! @index(unique: false)
  caller: Identity! @index(unique: false)
  eventIdx: Int!
  datetime: Date!
  createdBlock: Block!
  updatedBlock: Block!
}

# Type can be "AgentAdded", "AgentPermissionsChanged" or "AgentRemoved".
# permissions is only present in "AgentAdded" and "AgentPermissionsChanged".
type TickerExternalAgentHistory @entity {
  id: ID! #block_di/event_idx/did
  ticker: String! @index(unique: false)
  did: String! @index(unique: false)
  eventIdx: Int!
  datetime: Date!
  type: String!
  permissions: String
  createdBlock: Block!
  updatedBlock: Block!
}

type AgentGroup @entity {
  id: ID! #ticker/group_id
  permissions: String!
  members: [AgentGroupMembership!]! @derivedFrom(field: "group")
  createdBlock: Block!
  updatedBlock: Block!
}

type AgentGroupMembership @entity {
  id: ID! #ticker/group_id/member
  member: String! @index(unique: false)
  group: AgentGroup! @index(unique: false)
  createdBlock: Block!
  updatedBlock: Block!
}

type PortfolioJson @jsonField {
  did: String!
  number: Int!
}

type Portfolio @entity {
  id: ID! # did/number
  identity: Identity! @index(unique: false)
  number: Int! @index(unique: false)
  name: String
  custodian: Identity
  createdBlock: Block!
  updatedBlock: Block!
}

type PortfolioMovement @entity {
  id: ID!
  from: Portfolio! @index(unique: false)
  to: Portfolio! @index(unique: false)
  asset: Asset!
  amount: BigInt!
  address: String!
  createdBlock: Block!
  updatedBlock: Block!
}

type Leg @entity {
  id: ID! # instructionId/legIndex
  ticker: String!
  amount: BigInt!
  from: Portfolio! @index(unique: false)
  to: Portfolio! @index(unique: false)
  instruction: Instruction
  settlement: Settlement
  createdBlock: Block!
  updatedBlock: Block!
}

type Settlement @entity {
  id: ID!
  addresses: [String!]! @index(unique: false)
  result: String!
  legs: [Leg!]! @derivedFrom(field: "settlement")
  createdBlock: Block!
  updatedBlock: Block!
}

type Venue @entity {
  id: ID! # venueId
  owner: Identity!
  type: String!
  details: String
  createdBlock: Block!
  updatedBlock: Block!
}

type Instruction @entity {
  id: ID! #instructionId
  eventId: String!
  status: String!
  venue: Venue! @index(unique: false)
  settlementType: String!
  endBlock: Int
  tradeDate: Date
  valueDate: Date
  addresses: [String!]! @index(unique: false)
  legs: [Leg!]! @derivedFrom(field: "instruction")
  createdBlock: Block!
  updatedBlock: Block!
}

type Distribution @entity {
  id: ID!
  identity: Identity!
  localId: Int! @index(unique: false)
  ticker: String! @index(unique: false)
  portfolio: Portfolio!
  currency: String!
  perShare: BigInt!
  amount: BigInt!
  remaining: BigInt!
  paymentAt: BigInt!
  expiresAt: BigInt
  taxes: BigInt! # withheld tax for CA
  createdBlock: Block!
  updatedBlock: Block!
}

type DistributionPayment @entity {
  id: ID!
  distribution: Distribution!
  target: Identity!
  eventId: String!
  amount: BigInt!
  tax: BigInt!
  reclaimed: Boolean!
  datetime: Date!
  createdBlock: Block!
  updatedBlock: Block!
}

type ProposalVote @entity {
  id: ID!
  proposal: Proposal!
  account: String!
  vote: Boolean!
  weight: BigInt!
  createdBlock: Block!
  updatedBlock: Block!
}

type Proposal @entity {
  id: ID!
  proposer: String! @index(unique: false)
  state: String! @index(unique: false)
  owner: Identity!
  balance: BigInt!
  url: String
  description: String
  votes: [ProposalVote]! @derivedFrom(field: "proposal")
  snapshotted: Boolean!
  totalAyeWeight: BigInt!
  totalNayWeight: BigInt!
  createdBlock: Block!
  updatedBlock: Block!
}

type Scope @jsonField {
  type: String!
  value: String!
}

type ClaimScope @entity {
  id: ID!
  target: String! @index(unique: false)
  ticker: String
  scope: Scope
  createdBlock: Block!
  updatedBlock: Block!
}

type Claim @entity {
  id: ID!
  eventIdx: Int! @index(unique: false)
  target: Identity! @index(unique: false)
  issuer: Identity! @index(unique: false)
  issuanceDate: BigInt!
  lastUpdateDate: BigInt!
  expiry: BigInt
  filterExpiry: BigInt! @index(unique: false)
  type: String! @index(unique: false)
  jurisdiction: String
  scope: Scope
  cddId: String
  revokeDate: BigInt
  createdBlock: Block! @index(unique: false)
  updatedBlock: Block!
}

type TrustedClaimIssuerTicker @entity {
  id: ID!
  ticker: String!
  issuer: String! @index(unique: false)
  createdBlock: Block!
  updatedBlock: Block!
}

type SecurityIdentifier @jsonField {
  type: String!
  value: String!
}

type AssetPendingOwnershipTransfer @entity {
  id: ID! # authorization id
  ticker: String! @index(unique: false)
  from: String! @index(unique: false)
  to: String! @index(unique: false)
  type: String! @index(unique: false)
  data: String
  createdBlock: Block!
  updatedBlock: Block!
}

type TransferManager @entity {
  id: ID! # ticker/transferManagerType/value
  asset: Asset! @index(unique: false)
  type: String!
  value: Int!
  exemptedEntities: [String]!
  createdBlock: Block!
  updatedBlock: Block!
}

type Compliance @entity {
  id: ID! # ticker/complianceId
  complianceId: Int!
  data: String! # This could be expanded into structured data
  asset: Asset! @index(unique: false)
  createdBlock: Block!
  updatedBlock: Block!
}

type AssetHolder @entity {
  id: ID! # ticker/did
  identity: Identity! @index(unique: false)
  asset: Asset! @index(unique: false)
  amount: BigInt!
  createdBlock: Block!
  updatedBlock: Block!
}

type AssetDocument @entity {
  id: ID! # ticker/documentId
  documentId: Int!
  name: String!
  link: String!
  contentHash: String
  type: String
  filedAt: Date
  asset: Asset! @index(unique: false)
  createdBlock: Block!
  updatedBlock: Block!
}

type Asset @entity {
  id: ID! # ticker
  ticker: String! @index(unique: true)
  name: String @index(unique: false)
  type: String @index(unique: false)
  fundingRound: String @index(unique: false)
  isDivisible: Boolean!
  isFrozen: Boolean!
  isUniquenessRequired: Boolean!
  identifiers: [SecurityIdentifier]!
  owner: Identity!
  documents: [AssetDocument]! @derivedFrom(field: "asset")
  holders: [AssetHolder]! @derivedFrom(field: "asset")
  totalSupply: BigInt!
  totalTransfers: BigInt!
  isCompliancePaused: Boolean!
  compliance: [Compliance]! @derivedFrom(field: "asset")
  transferManagers: [TransferManager]! @derivedFrom(field: "asset")
  createdBlock: Block!
  updatedBlock: Block!
}

type Funding @entity {
  id: ID!
  asset: Asset! @index(unique: false)
  fundingRound: String! @index(unique: false)
  amount: BigInt!
  totalFundingAmount: BigInt!
  datetime: Date!
  createdBlock: Block!
  updatedBlock: Block!
}
